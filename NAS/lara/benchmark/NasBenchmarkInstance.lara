import lara.benchmark.ClavaBenchmarkInstance;
import lara.benchmark.NasBenchmarkResources;

import clava.Clava;
import clava.ClavaJoinPoints;

import weaver.WeaverJps;

/**
 * Instance of a C NAS benchmark.
 */
function NasBenchmarkInstance(benchmarkName, inputSize) {
    // Parent constructor
    ClavaBenchmarkInstance.call(this, "NAS-" + benchmarkName + "-" + inputSize);
	
	this._benchmarkName = benchmarkName;
	this._inputSize = inputSize;
	
	this._previousStandard = undefined;
	this._previousFlags = undefined;
	
	var filename = "NAS_" + benchmarkName + ".c";
	this._file = NasBenchmarkResources.getFile(filename);
}
// Inheritance
NasBenchmarkInstance.prototype = Object.create(ClavaBenchmarkInstance.prototype);


/*** IMPLEMENTATIONS ***/

PolybenchBenchmarkInstance.prototype._loadPrologue = function() {

	// Set standard
	this._previousStandard = Clava.getData().getStandard();
	Clava.getData().setStandard("c99");	

	// Set define
	this._previousFlags = Clava.getData().getFlags();
	var modifiedFlags = this._previousFlags + " -DCLASS_" + this._inputSize;
	Clava.getData().setFlags(modifiedFlags);

}

NasBenchmarkInstance.prototype._loadPrivate = function() {


	// Save current AST
	Clava.pushAst();
	
	// Clean AST
	WeaverJps.root().removeChildren();

	// Add code
	var clavaJPFile = ClavaJoinPoints.file(this._file);
	Clava.addFile(clavaJPFile);	

	// Rebuild
	Clava.rebuild();

}



NasBenchmarkInstance.prototype._closePrivate = function() {
	// Restore standard
	Clava.getData().setStandard(this._previousStandard);	
	this._previousStandard = undefined;

	// Restore flags
	Clava.getData().setFlags(this._previousFlags);
	this._previousFlags = undefined;	

	// Restore previous AST
	Clava.popAst();
		
}

